name: build macOS, Linux, Windows

on: [push, pull_request]

jobs:
  build:
    timeout-minutes: 10

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
      fail-fast: false

    steps:
      - name: Set up screen (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xfixes0 libxcb-shape0 libxcb-cursor0
          sudo apt-get install libpulse-mainloop-glib0
          sudo apt-get install libxkbcommon-x11-0
          sudo apt-get install libegl1-mesa
          Xvfb :0 -screen 0 1920x1080x24 -ac &
          echo "DISPLAY=:0" >> $GITHUB_ENV

      - name: Set up screen (macOS)
        if: runner.os == 'macOS'
        run: |
          "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080
          system_profiler SPDisplaysDataType | grep Resolution

      - name: Set up screen (Windows)
        if: runner.os == 'Windows'
        run: |
          Set-DisplayResolution -Width 1920 -Height 1080 -Force
          Get-DisplayResolution

      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
            python-version: 3.11

      - name: Upgrade PIP
        run: python -m pip install --upgrade pip

      - name: Add extra info to pyproject.toml
        run: |
          python -m pip install toml
          python utils.py --update

      - name: Declare env variables on push only
        if: github.event_name == 'push'
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Declare env variables on pull_request only
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$GITHUB_HEAD_REF" >> $GITHUB_ENV

      - name: Declare env variables on push and pull_request
        shell: bash
        run: |
          echo "APP_NAME=$(python utils.py --get release.app_name)" >> $GITHUB_ENV
          echo "RELEASE_TAG=$(python utils.py --get ci.app.info.release_tag)" >> $GITHUB_ENV
          echo "RELEASE_TITLE=$(python utils.py --get ci.app.info.release_title)" >> $GITHUB_ENV
          echo "SCRIPTS_PATH=$(python utils.py --get ci.project.subdirs.scripts)" >> $GITHUB_ENV
          echo "DISTRIBUTION_PATH=$(python utils.py --get ci.project.subdirs.distribution)" >> $GITHUB_ENV
          echo "DOWNLOAD_PATH=$(python utils.py --get ci.project.subdirs.download)" >> $GITHUB_ENV
          echo "QTIFW_PATH=$(python utils.py --get ci.qtifw.setup.installation_path.${{ runner.os }})" >> $GITHUB_ENV
          echo "PYTHON_PACKAGES_PATH=$(python utils.py --get ci.cache.python_packages_path)" >> $GITHUB_ENV
          echo "GIT_INSTALL_URL=git+$GITHUB_SERVER_URL/$GITHUB_REPOSITORY@${{ env.BRANCH_NAME }}" >> $GITHUB_ENV

      - name: Install Python dependences
        run: |
          python -m pip install numpy lmfit orjson jsbeautifier
          python -m pip install requests dephell_licenses
          python -m pip install git+https://github.com/ikibalin/cryspy.git@beta
          python -m pip install git+https://github.com/easyscience/EasyApp.git@new-easy-app2

      - name: Run QML GUI tests
        run: |
          cd EasyExampleApp
          python main.py --testmode

      - name: Create freezed python app bundle
        run: python ${{ env.SCRIPTS_PATH }}/FreezeApp.py

      - name: Create offline and online app installers from freezed app bundle
        run: python ${{ env.SCRIPTS_PATH }}/MakeInstaller.py

      - name: Install app
        run: python ${{ env.SCRIPTS_PATH }}/InstallApp.py

      - name: Run app in testmode, record screen and quit
        run: python ${{ env.SCRIPTS_PATH }}/RunApp.py --testmode


      #- name: Run pytest (compare app images after previous step)
      #  run: pytest
